{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onListItemMouseOver","e","setState","isDraggable","onListItemMouseOut","onListItemDragStart","id","ev","dataTransfer","setData","onListItemDrop","x","from","parseInt","getData","to","newItems","state","items","forEach","i","push","deleteItem","filter","el","idx","currentText","onChange","bind","assertThisInitialized","onKeyPress","onListItemDragOver","preventDefault","target","value","key","concat","toConsumableArray","_this2","react_default","a","createElement","Container_default","Form_default","Control","xl","placeholder","ListGroup_default","map","ListGroupItem_default","className","draggable","sm","onDragStart","onDragOver","onDrop","BlurCircular_default","onMouseOver","onMouseOut","DeleteOutline_default","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db65d7b2.chunk.js","sourcesContent":["import React from 'react';\nimport ListGroup from \"react-bootstrap/ListGroup\"\nimport ListGroupItem from 'react-bootstrap/ListGroupItem'\nimport Form from \"react-bootstrap/Form\"\nimport Container from \"react-bootstrap/Container\"\nimport BlurCircular from \"@material-ui/icons/BlurCircular\"\nimport Delete from \"@material-ui/icons/DeleteOutline\"\nimport \"./index.css\"\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentText: \"\",\n      items: [],\n      isDraggable: false\n    }\n    this.onChange = this.onChange.bind(this)\n    this.onKeyPress = this.onKeyPress.bind(this)\n\n    this.onListItemMouseOver = this.onListItemMouseOver.bind(this)\n    this.onListItemMouseOut = this.onListItemMouseOut.bind(this)\n\n    this.onListItemDragStart = this.onListItemDragStart.bind(this)\n    this.onListItemDrop = this.onListItemDrop.bind(this)\n    this.onListItemDragOver = this.onListItemDragOver.bind(this)\n\n    this.deleteItem = this.deleteItem.bind(this)\n  }\n\n  onListItemMouseOver = e => this.setState({ isDraggable: true })\n  onListItemMouseOut = e => this.setState({ isDraggable: false})\n\n  onListItemDragStart = id => ev => {\n    ev.dataTransfer.setData(\"int\",id)\n  }\n\n  onListItemDragOver(ev) {\n    ev.preventDefault()\n  }\n\n  onListItemDrop = x => ev => {\n    let from = parseInt(ev.dataTransfer.getData(\"int\"))\n    let to = parseInt(x)\n    let newItems = []\n    this.state.items.forEach( (x,i) => {\n      if(i !== from) {\n        if(i === to) {\n          newItems.push(this.state.items[from])\n        }\n        newItems.push(x)\n      } \n    })\n    this.setState({items: newItems})\n  }\n\n\n  onChange(e) {\n    this.setState({currentText: e.target.value})\n  }\n  onKeyPress(e) {\n    if(e.key === 'Enter') {\n      this.setState(\n        {\n          items: [\n            ...this.state.items,\n            this.state.currentText],\n          currentText: \"\"\n        }     \n      )\n    }\n  }\n\n  deleteItem = x => ev => this.setState({items: this.state.items.filter( (el,idx) => idx !== parseInt(x) ) })\n  \n  render() {\n\n    return (\n      <Container>\n        \n        <Form.Control \n          xl=\"50%\" \n          onChange={this.onChange} \n          onKeyPress={this.onKeyPress} \n          value={this.state.currentText}\n          placeholder=\"Enter your list item here\"\n        ></Form.Control>\n       \n        <ListGroup>\n          {\n            this.state.items.map((x,i) => \n                \n                <ListGroupItem \n                  key={i}\n                  className=\"listGroupItemStyle\"\n                  draggable={this.state.isDraggable}\n                  sm=\"30%\"\n\n                  onDragStart={this.onListItemDragStart(i)}\n                  onDragOver={this.onListItemDragOver}\n                  onDrop={this.onListItemDrop(i)}                   \n                >\n                  <BlurCircular \n                    onMouseOver={this.onListItemMouseOver} \n                    onMouseOut={this.onListItemMouseOut} \n                    className=\"iconStyle\"\n                  /> \n                  {x}\n                  <Delete \n                    className=\"deleteIcon\"\n                    onClick={this.deleteItem(i)}\n                  />\n\n    \n                </ListGroupItem>\n            )\n          }\n        </ListGroup>\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}