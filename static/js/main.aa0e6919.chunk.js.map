{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentText","items","onChange","bind","assertThisInitialized","onKeyPress","window","myObj","e","setState","target","value","key","concat","toConsumableArray","react_default","a","createElement","Container_default","Form_default","Control","xl","ListGroup_default","map","x","ListGroupItem_default","draggable","className","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAyDeA,cAjDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAa,GACbC,MAAO,CACL,uBAGJT,EAAKU,SAAWV,EAAKU,SAASC,KAAdV,OAAAW,EAAA,EAAAX,CAAAD,IAChBA,EAAKa,WAAab,EAAKa,WAAWF,KAAhBV,OAAAW,EAAA,EAAAX,CAAAD,IAClBc,OAAOC,MAAQf,EAAKO,MAVHP,wEAaVgB,GACPb,KAAKc,SAAS,CAACT,YAAaQ,EAAEE,OAAOC,2CAE5BH,GACI,UAAVA,EAAEI,KACHjB,KAAKc,SACH,CACER,MAAK,GAAAY,OAAApB,OAAAqB,EAAA,EAAArB,CACAE,KAAKI,MAAME,OADX,CAEHN,KAAKI,MAAMC,cACbA,YAAa,sCAMnB,OACEe,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KAEED,EAAAC,EAAAC,cAACE,EAAAH,EAAKI,QAAN,CAAcC,GAAG,MAAMnB,SAAUP,KAAKO,SAAUG,WAAYV,KAAKU,WAAYM,MAAOhB,KAAKI,MAAMC,cAE/Fe,EAAAC,EAAAC,cAACK,EAAAN,EAAD,KAEIrB,KAAKI,MAAME,MAAMsB,IAAI,SAACC,GAAD,OACjBT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAeU,WAAS,EAACL,GAAG,OAC1BN,EAAAC,EAAAC,cAAA,QAAMU,UAAU,uBACjBH,cAxCCI,IAAMC,WCKJC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aa0e6919.chunk.js","sourcesContent":["import React from 'react';\nimport ListGroup from \"react-bootstrap/ListGroup\"\nimport ListGroupItem from 'react-bootstrap/ListGroupItem'\nimport Form from \"react-bootstrap/Form\"\nimport Container from \"react-bootstrap/Container\"\nimport {} from \"react-bootstrap/\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentText: \"\",\n      items: [\n        \"React w/ Bootstrap\"\n      ]  \n    }\n    this.onChange = this.onChange.bind(this)\n    this.onKeyPress = this.onKeyPress.bind(this)\n    window.myObj = this.state\n  }\n\n  onChange(e) {\n    this.setState({currentText: e.target.value})\n  }\n  onKeyPress(e) {\n    if(e.key === 'Enter') {\n      this.setState(\n        {\n          items: [\n            ...this.state.items,\n            this.state.currentText],\n          currentText: \"\"\n        }     \n      )\n    }\n  }\n  render() {\n    return (\n      <Container>\n        \n        <Form.Control xl=\"50%\" onChange={this.onChange} onKeyPress={this.onKeyPress} value={this.state.currentText}></Form.Control>\n       \n        <ListGroup>\n          {\n            this.state.items.map((x) => \n                <ListGroupItem draggable xl=\"50%\">\n                  <span className=\"oi oi-grid-four-up\"></span>\n                {x}\n                </ListGroupItem>\n            )\n          }\n        </ListGroup>\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}